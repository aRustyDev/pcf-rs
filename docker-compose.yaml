services:
    # Traefik - Reverse Proxy
    traefik:
        image: traefik:v3.0
        container_name: traefik
        command:
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.websecure.address=:443"
            - "--log.level=DEBUG"
        ports:
            - "80:80"
            - "443:443"
            - "8080:8080" # Traefik dashboard
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        depends_on:
            - hydra
            - spicedb
            - api
        networks:
            - dev-network
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
            - "traefik.http.services.traefik.loadbalancer.server.port=8080"

    # ORY Kratos - Identity Management
    kratos:
        image: oryd/kratos:v1.0.0
        container_name: kratos
        environment:
            - DSN=memory
            - LOG_LEVEL=debug
        volumes:
            - ./config/kratos:/etc/config/kratos
        command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
        networks:
            - dev-network
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.kratos-public.rule=Host(`kratos.localhost`)"
            - "traefik.http.services.kratos-public.loadbalancer.server.port=4433"
            - "traefik.http.routers.kratos-admin.rule=Host(`kratos-admin.localhost`)"
            - "traefik.http.services.kratos-admin.loadbalancer.server.port=4434"

    # ORY Hydra - OAuth2/OIDC (optional, if you need OAuth2)
    hydra:
        image: oryd/hydra:v2.2.0
        container_name: hydra
        environment:
            - DSN=memory
            - URLS_SELF_ISSUER=http://hydra.localhost
            - URLS_CONSENT=http://localhost:3000/consent
            - URLS_LOGIN=http://localhost:3000/login
            - URLS_LOGOUT=http://localhost:3000/logout
            - SECRETS_SYSTEM=youReallyNeedToChangeThis
            - LOG_LEVEL=debug
            - OAUTH2_EXPOSE_INTERNAL_ERRORS=true
        command: serve all --dev
        depends_on:
            - kratos
        networks:
            - dev-network
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.hydra-public.rule=Host(`hydra.localhost`)"
            - "traefik.http.services.hydra-public.loadbalancer.server.port=4444"
            - "traefik.http.routers.hydra-admin.rule=Host(`hydra-admin.localhost`)"
            - "traefik.http.services.hydra-admin.loadbalancer.server.port=4445"

    # OpenTelemetry Collector - Priority 2
    otel-collector:
        image: otel/opentelemetry-collector-contrib:latest
        container_name: otel-collector
        command: ["--config=/etc/otel-collector-config.yaml"]
        volumes:
            - ./config/observability/otel-collector.yaml:/etc/otel-collector-config.yaml:ro
        ports:
            - "4317:4317" # OTLP gRPC receiver
            - "4318:4318" # OTLP HTTP receiver
            - "8888:8888" # Prometheus metrics exposed by the collector
            - "8889:8889" # Prometheus exporter metrics
            - "13133:13133" # health_check extension
            - "55679:55679" # zpages extension
        networks:
            - dev-network
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: "1"
        depends_on:
            - tempo
            - loki
            - mimir
            - prometheus

    # SpiceDB - Priority 3 (Database)
    spicedb:
        image: authzed/spicedb:latest
        container_name: spicedb
        command: serve --grpc-preshared-key "somerandomkeyhere"
        ports:
            - "50051:50051"
            - "8443:8443"
        # command: serve --grpc-preshared-key "somerandomkeyhere" --datastore-engine memory
        environment:
            SPICEDB_GRPC_PRESHARED_KEY: somerandomkeyhere
            SPICEDB_DATASTORE_ENGINE: postgres
            SPICEDB_DATASTORE_CONN_URI: postgres://spicedb:spicedb@postgres:5432/spicedb?sslmode=disable

            # SPICEDB_OTEL_PROVIDER: otlp
            # SPICEDB_OTEL_ENDPOINT: otel-collector:4317
            # SPICEDB_OTEL_INSECURE: "true"
        volumes:
            - ./schema/spicedb/example.zed:/app/schema.zed:ro
        networks:
            - dev-network
        depends_on:
            postgres:
                condition: service_healthy
            otel-collector:
                condition: service_started
        healthcheck:
            test: ["CMD", "grpc_health_probe", "-addr=:50051"]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: "1"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.spicedb.rule=Host(`spicedb.localhost`)"
            - "traefik.http.services.spicedb.loadbalancer.server.port=8443"
            - "traefik.tcp.routers.spicedb-grpc.rule=HostSNI(`spicedb-grpc.localhost`)"
            - "traefik.tcp.routers.spicedb-grpc.entrypoints=web"
            - "traefik.tcp.services.spicedb-grpc.loadbalancer.server.port=50051"

    # SpiceDB Migrations
    spicedb-migrate:
        image: authzed/spicedb:latest
        command: migrate head
        environment:
            SPICEDB_DATASTORE_ENGINE: postgres
            SPICEDB_DATASTORE_CONN_URI: postgres://spicedb:spicedb@postgres:5432/spicedb?sslmode=disable
        networks:
            - dev-network
        depends_on:
            postgres:
                condition: service_healthy
                restart: true
            otel-collector:
                condition: service_started

    # PostgreSQL for SpiceDB
    postgres:
        image: postgres:14
        container_name: postgres
        environment:
            - POSTGRES_USER=spicedb
            - POSTGRES_PASSWORD=spicedb
            - POSTGRES_DB=spicedb
        volumes:
            - postgres-data:/var/lib/postgresql/data
        networks:
            - dev-network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U spicedb"]
            interval: 10s
            timeout: 5s
            retries: 5

    # SurrealDB - Priority 3 (Database)
    surrealdb:
        image: surrealdb/surrealdb:latest
        container_name: surrealdb
        command: start --user root --pass root --bind 0.0.0.0:8000 memory
        environment:
            SURREAL_LOG_LEVEL: info
            SURREAL_CAPS_ALLOW_EXPERIMENTAL: graphql
        volumes:
            - surrealdb-data:/data
        ports:
            - "8000:8000"
        networks:
            - dev-network
        depends_on:
            - spicedb
            - otel-collector
        # Health check removed - SurrealDB container doesn't include shell/curl
        deploy:
            resources:
                limits:
                    memory: 1G
                    cpus: "1"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.surrealdb.rule=Host(`surrealdb.localhost`)"
            - "traefik.http.services.surrealdb.loadbalancer.server.port=8000"

    # # Meilisearch - Priority 4
    # meilisearch:
    #     image: getmeili/meilisearch:latest
    #     container_name: meilisearch
    #     environment:
    #         MEILI_MASTER_KEY: masterKey
    #         MEILI_NO_ANALYTICS: "true"
    #         MEILI_ENV: development
    #         MEILI_LOG_LEVEL: INFO
    #     volumes:
    #         - meilisearch-data:/meili_data
    #     networks:
    #         - dev-network
    #     depends_on:
    #         - spicedb
    #         - surrealdb
    #         - otel-collector
    #     healthcheck:
    #         test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #     deploy:
    #         resources:
    #             limits:
    #                 memory: 512M
    #                 cpus: "0.5"

    # Mimir for long-term metric storage
    mimir:
        image: grafana/mimir:latest
        container_name: mimir
        command: ["-config.file=/etc/mimir.yaml"]
        volumes:
            - ./config/observability/mimir.yaml:/etc/mimir.yaml
            - mimir-data:/data
        ports:
            - "9009:9009" # Mimir HTTP API

    # Prometheus for metric collection (writes to Mimir)
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.enable-remote-write-receiver"
            - "--enable-feature=exemplar-storage" # Enable exemplar storage to link metrics with traces
        volumes:
            - ./config/observability/prometheus.yaml:/etc/prometheus/prometheus.yml
            - prometheus-data:/prometheus
        ports:
            - "9090:9090"
        depends_on:
            - mimir

    # Grafana Tempo - Priority 4
    tempo:
        image: grafana/tempo:latest
        container_name: tempo
        command: ["-config.file=/etc/tempo.yaml"]
        volumes:
            - ./config/observability/tempo.yaml:/etc/tempo.yaml:ro
            - tempo-data:/tmp/tempo
        ports:
            - "3200:3200" # tempo
            - "4319:4319" # otlp grpc
            - "4320:4320" # otlp http
            - "9411:9411" # zipkin
        networks:
            - dev-network
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: "0.5"

    # Grafana Loki - Priority 4
    loki:
        image: grafana/loki:latest
        container_name: loki
        command: -config.file=/etc/loki/local-config.yaml
        volumes:
            - ./config/observability/loki.yaml:/etc/loki/local-config.yaml:ro
            - ./config/observability/loki-runtime.yaml:/etc/loki/runtime-config.yaml:ro
            - loki-data:/loki
        ports:
            - "3100:3100" # HTTP API
            - "9096:9096" # gRPC
        networks:
            - dev-network
        healthcheck:
            test:
                [
                    "CMD",
                    "wget",
                    "--quiet",
                    "--tries=1",
                    "--spider",
                    "http://localhost:3100/ready",
                ]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: "0.5"

    # Grafana - Priority 4
    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        environment:
            GF_SECURITY_ADMIN_USER: admin
            GF_SECURITY_ADMIN_PASSWORD: admin
            GF_USERS_ALLOW_SIGN_UP: "false"
        volumes:
            - grafana-data:/var/lib/grafana
            - ./config/observability/grafana:/etc/grafana
        networks:
            - dev-network
        depends_on:
            - prometheus
            - mimir
            - spicedb
            - tempo
            - loki
            - otel-collector
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -f http://localhost:3000/api/health || exit 1",
                ]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: "0.5"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
            - "traefik.http.services.grafana.loadbalancer.server.port=3000"

    # API (Placeholder) - Priority 4
    api:
        image: busybox:latest
        container_name: api
        command:
            ["sh", "-c", "echo 'API placeholder running' && sleep infinity"]
        environment:
            # Application environment
            APP_ENVIRONMENT: development

            # Database configuration
            APP_DATABASE__SURREALDB__HOST: surrealdb
            APP_DATABASE__SURREALDB__PORT: 8000
            APP_DATABASE__SURREALDB__USERNAME: root
            APP_DATABASE__SURREALDB__PASSWORD: root
            APP_DATABASE__SURREALDB__NAMESPACE: test
            APP_DATABASE__SURREALDB__DATABASE: test

            # Service configuration
            APP_SERVICES__SPICEDB__URL: spicedb:50051
            APP_SERVICES__SPICEDB__TOKEN: somerandomkeyhere
            APP_SERVICES__SPICEDB__INSECURE: "true"
            APP_SERVICES__KRATOS__PUBLIC_URL: http://kratos:4433
            APP_SERVICES__KRATOS__ADMIN_URL: http://kratos:4434
            APP_SERVICES__KRATOS__BROWSER_URL: http://localhost:4433

            # Feature flags
            APP_FEATURES__ENABLE_WEBHOOKS: "true"
            APP_FEATURES__ENABLE_TELEMETRY: "true"

            # GraphQL settings
            APP_GRAPHQL__PLAYGROUND_ENABLED: "true"
            APP_GRAPHQL__INTROSPECTION_ENABLED: "true"
            APP_GRAPHQL__PLAYGROUND_ENDPOINT: http://localhost:4000
            APP_GRAPHQL__GRAPHQL_ENDPOINT: http://localhost:4000/graphql

            # Legacy environment variables for backwards compatibility
            KRATOS_PUBLIC_URL: http://kratos:4433
            KRATOS_ADMIN_URL: http://kratos:4434
        networks:
            - dev-network
        depends_on:
            - hydra
            - spicedb
            - surrealdb
            # - meilisearch
            - otel-collector
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: "1"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.api.rule=Host(`api.localhost`)"
            - "traefik.http.services.api.loadbalancer.server.port=4000"

networks:
    dev-network:
        driver: bridge
        name: pcf-dev-network

volumes:
    surrealdb-data:
        name: pcf-surrealdb-data
    # meilisearch-data:
    #     name: pcf-meilisearch-data
    prometheus-data:
        name: pcf-prometheus-data
    mimir-data:
        name: pcf-mimir-data
    tempo-data:
        name: pcf-tempo-data
    loki-data:
        name: pcf-loki-data
    grafana-data:
        name: pcf-grafana-data
    grafana-config:
        name: pcf-grafana-config
    postgres-data:
        name: pcf-postgres-data
